#if !EXCLUDE_CODEGEN
#pragma warning disable 1591
#pragma warning disable 693
#pragma warning disable 1998
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Orleans.Samples.Hello2012.GrainInterfaces
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using Orleans.Coordination;
    using System.Collections;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class Hello2012TaskGrainFactory
    {
        

                        public static IHello2012TaskGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IHello2012TaskGrain), 1100997534, primaryKey));
                        }

                        public static IHello2012TaskGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IHello2012TaskGrain), 1100997534, primaryKey));
                        }

            public static IHello2012TaskGrain Cast(IAddressable grainRef)
            {
                
                return Hello2012TaskGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("Orleans.Samples.Hello2012.GrainInterfaces.IHello2012TaskGrain")]
        internal class Hello2012TaskGrainReference : Orleans.GrainReference, IHello2012TaskGrain, Orleans.IAddressable
        {
            

            public static IHello2012TaskGrain Cast(IAddressable grainRef)
            {
                
                return (IHello2012TaskGrain) GrainReference.CastInternal(typeof(IHello2012TaskGrain), (GrainReference gr) => { return new Hello2012TaskGrainReference(gr);}, grainRef, 1100997534);
            }

                protected override int InterfaceId { get { return 1100997534; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "Orleans.Samples.Hello2012.GrainInterfaces.IHello2012TaskGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return Hello2012TaskGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal Hello2012TaskGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                Hello2012TaskGrainReference input = ((Hello2012TaskGrainReference)(original));
                return ((Hello2012TaskGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                Hello2012TaskGrainReference input = ((Hello2012TaskGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return Hello2012TaskGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task<string> SayHelloAsync(string name)
            {

                return base.InvokeMethodAsync<System.String>(1363881158, new object[] {name}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("Orleans.Samples.Hello2012.GrainInterfaces.IHello2012TaskGrain", 1100997534)]
    internal class Hello2012TaskGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return 1100997534;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1100997534:  // IHello2012TaskGrain
                        switch (methodId)
                        {
                            case 1363881158: 
                                return await ((IHello2012TaskGrain)grain).SayHelloAsync((String)arguments[0]);
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1100997534:  // IHello2012TaskGrain
                    switch (methodId)
                    {
                        case 1363881158:
                            return "SayHelloAsync";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class Hello2012TaskGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class HelloEchoTaskGrainFactory
    {
        

                        public static IHelloEchoTaskGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IHelloEchoTaskGrain), -1521191090, primaryKey));
                        }

                        public static IHelloEchoTaskGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IHelloEchoTaskGrain), -1521191090, primaryKey));
                        }

            public static IHelloEchoTaskGrain Cast(IAddressable grainRef)
            {
                
                return HelloEchoTaskGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("Orleans.Samples.Hello2012.GrainInterfaces.IHelloEchoTaskGrain")]
        internal class HelloEchoTaskGrainReference : Orleans.GrainReference, IHelloEchoTaskGrain, Orleans.IAddressable
        {
            

            public static IHelloEchoTaskGrain Cast(IAddressable grainRef)
            {
                
                return (IHelloEchoTaskGrain) GrainReference.CastInternal(typeof(IHelloEchoTaskGrain), (GrainReference gr) => { return new HelloEchoTaskGrainReference(gr);}, grainRef, -1521191090);
            }

                protected override int InterfaceId { get { return -1521191090; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "Orleans.Samples.Hello2012.GrainInterfaces.IHelloEchoTaskGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return HelloEchoTaskGrainMethodInvoker.GetMethodName(interfaceId, methodId); }

            public async System.Threading.Tasks.Task<HelloEchoTaskGrainProperties> GetProperties() 
            { 
                return await base.InvokeMethodAsync<HelloEchoTaskGrainProperties>( -606142484, new object[]{}, TimeSpan.Zero);
            }
            
            
            protected internal HelloEchoTaskGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            public System.Threading.Tasks.Task<string> LastEchoAsync
            {
                get
                {

                return base.InvokeMethodAsync<System.String>(-1937603982, new object[] {}, TimeSpan.Zero , options: InvokeMethodOptions.ReadOnly);
                }
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                HelloEchoTaskGrainReference input = ((HelloEchoTaskGrainReference)(original));
                return ((HelloEchoTaskGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                HelloEchoTaskGrainReference input = ((HelloEchoTaskGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return HelloEchoTaskGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task<string> EchoHelloAsync(string name)
            {

                return base.InvokeMethodAsync<System.String>(1265578146, new object[] {name}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("Orleans.Samples.Hello2012.GrainInterfaces.IHelloEchoTaskGrain", -1521191090)]
    internal class HelloEchoTaskGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return -1521191090;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1521191090:  // IHelloEchoTaskGrain
                        switch (methodId)
                        {
                            case -1937603982: 
                                return await ((IHelloEchoTaskGrain)grain).LastEchoAsync;
                            case 1265578146: 
                                return await ((IHelloEchoTaskGrain)grain).EchoHelloAsync((String)arguments[0]);
                            case -606142484: return ((IHelloEchoTaskGrain)grain).GetProperties();
                                                        default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1521191090:  // IHelloEchoTaskGrain
                    switch (methodId)
                    {
                        case -1937603982:
                            return "get_LastEchoAsync";
                    case 1265578146:
                            return "EchoHelloAsync";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [System.SerializableAttribute()]
    public static class HelloEchoTaskGrainExtensionMethods
    {
        
static public System.Threading.Tasks.Task<HelloEchoTaskGrainProperties> GetProperties(this IHelloEchoTaskGrain interfaceData) 
            { 
                HelloEchoTaskGrainFactory.HelloEchoTaskGrainReference gref = interfaceData as HelloEchoTaskGrainFactory.HelloEchoTaskGrainReference;
                 return gref.GetProperties();
            }
            
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.795.25827")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class HelloEchoTaskGrainProperties
    {
        

            public String LastEchoAsync { get; set; }
            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                retValue["LastEchoAsync"] = LastEchoAsync;
                return retValue;
            }
    }
}
#pragma warning restore 1998
#endif
